li x0 0
li x1 65535
li x2 65535
//x2 is now all 1s
slli x2 x2 16
add x2 x2 x1
//x2 is -5
subi x2 x2 4
//5 is reserved for -2
sw x2 5(x0)
li x2 1000 //countdown!!!
//6 is reserved for walk countdown
sw x2 6(x0)
li x2 10000
//4 is reserved for attack countdown
sw x2 4(x0)

//sprite sheets
// type 4
li x2 2
sw x2 32(x0) //frame 0 for barb
li x2 3
sw x2 35(x0) //elixir for barb
// type 5
li x2 6
sw x2 36(x0) //frame 0 for archer
li x2 2
sw x2 39(x0) //elixir for archer
li x2 7
sw x2 37(x0) //damage of archer = 5
li x2 100
sw x2 38(x0) // health of archer = 100

//type 7
li x2 5
sw x2 47(x0) //elixir for giant
li x2 10
sw x2 44(x0) //frame for giant

//type 2
li x2 15
sw x2 24(x0) //frame 0 for arrow

li x2 14
sw x2 20(x0) //frame 0 for building

//elixir
li x31 1
li x30 1
li x2 20000
sw x2 30(x0)

//bridge locations 7,8 9,10
li x2 5
sw x2 7(x0)
li x2 300
sw x2 8(x0)
li x2 280
sw x2 9(x0)
li x2 300
sw x2 10(x0)
//midpoint x
li x2 150
sw x2 11(x0)

//3 is reserved for mouse localparam
//mice
//li x2 62
li x2 8
sw x2 3(x0) //save to mem 3
sw x0 0(x0) //clear x0


//li x2 63
li x2 9
spli x2 1 3
sw x0 1(x0)

//player 1
//sprite 0 building
li x2 63 //x2=0
spli x2 1 0
spli x2 40 1
spli x2 620 2
spli x2 14 3
spli x2 1000 4
spli x2 30 5
spli x2 0 6
spli x2 1 7
slli x3 x2 2
sw x0 65(x3) //countdown is 0

//sprite 0 building
li x2 62 //x2=0
spli x2 1 0
spli x2 260 1
spli x2 620 2
spli x2 14 3
spli x2 1000 4
spli x2 30 5
spli x2 0 6
spli x2 1 7
slli x3 x2 2
sw x0 65(x3) //countdown is 0


//sprite 1
addi x2 x0 1 //x2=1 building
spli x2 1 0
spli x2 50 1
spli x2 80 2
spli x2 14 3
spli x2 1000 4
spli x2 30 5 
spli x2 0 6
spli x2 0 7
slli x3 x2 2
sw x0 65(x3) //countdown is 0

//sprite 3
addi x2 x0 3 //x2=3 building
spli x2 1 0
spli x2 260 1
spli x2 80 2
spli x2 14 3
spli x2 1000 4
spli x2 30 5 
spli x2 0 6
spli x2 0 7
slli x3 x2 2
sw x0 65(x3) //countdown is 0

//sprite 3
addi x2 x0 12 //x2=2
spli x2 2 0
spli x2 100 1
spli x2 100 2
spli x2 0 3
spli x2 0 4 
spli x2 5 5 
spli x2 0 6
spli x2 0 7
slli x3 x2 2
sw x0 65(x3) //countdown is 0

//sprite 4
addi x2 x0 4 //x2=4
spli x2 4 0
spli x2 0 1
spli x2 0 2
spli x2 0 3
spli x2 100 4
spli x2 5 5 
spli x2 0 6
spli x2 0 7
slli x3 x2 2
sw x0 65(x3) //countdown is 0

//p0
//hole card barb
//sprite 5
addi x2 x0 5 //x2=5
spli x2 3 0
spli x2 100 1
spli x2 20 2
li x3 4
slli x3 x3 2
lw x4 16(x3)
splreg x2 x4 3
spli x2 100 4
spli x2 20 5 
spli x2 4 6 //4=barb
spli x2 0 7

//hole card archer
//sprite 6
addi x2 x0 6 //x2=6
spli x2 3 0
spli x2 150 1
spli x2 20 2
li x3 5
slli x3 x3 2
lw x4 16(x3)
splreg x2 x4 3
spli x2 100 4
spli x2 15 5 
spli x2 5 6 //5 =archer
spli x2 0 7

//hole card giant
//sprite 11
addi x2 x0 11 //x2=11
spli x2 3 0
spli x2 200 1
spli x2 20 2
li x3 7
slli x3 x3 2
lw x4 16(x3)
splreg x2 x4 3
spli x2 500 4
spli x2 15 5 
spli x2 7 6 //7 =giant
spli x2 0 7


//p1
//hole card barb
//sprite 7
addi x2 x0 7 //x2=7
spli x2 3 0
spli x2 100 1
spli x2 660 2
li x3 4
slli x3 x3 2
lw x4 16(x3)
splreg x2 x4 3
spli x2 100 4
spli x2 20 5 
spli x2 4 6 //4=barb
spli x2 1 7

//hole card archer
//sprite 10
addi x2 x0 10 //x2=10
spli x2 3 0
spli x2 150 1
spli x2 660 2
li x3 5
slli x3 x3 2
lw x4 16(x3)
splreg x2 x4 3
spli x2 100 4
spli x2 15 5 
spli x2 5 6 //5 =archer
spli x2 1 7

//hole card giant
//sprite 12
addi x2 x0 12 //x2=12
spli x2 3 0
spli x2 200 1
spli x2 660 2
li x3 7
slli x3 x3 2
lw x4 16(x3)
splreg x2 x4 3
spli x2 500 4
spli x2 15 5 
spli x2 7 6 //7 =giant
spli x2 1 7



li x1 0
sw x1 66(x3) //target is sprite 0
//main for loop
li x6 64 //x6 = max sprites-2
li x3 8
spli x3 0 5
li x3 9
spli x3 0 5
LOOP
li x1 0
li x2 8
bge x30 x2 FULL0
    lw x2 12(x0)
    bne x2 x0 NORESET0
        li x2 30000
        addi x30 x30 1
    NORESET0
    subi x2 x2 1
    sw x2 12(x0)
FULL0
li x2 8
bge x31 x2 FULL1
    lw x2 13(x0)
    bne x2 x0 NORESET1
        li x2 30000
        addi x31 x31 1
    NORESET1
    subi x2 x2 1
    sw x2 13(x0)
FULL1
//mouse edge detection
//mouse1
li x3 8
lisp x3 x2 4 //x2 current state
lisp x3 x4 5 //last state
spli x3 0 6
beq x4 x2 NOCLICK1
beq x4 x0 NOCLICK1 //last state was unclicked
spli x3 1 6
NOCLICK1
splreg x3 x2 5 //load current state to last state

//mouse2
li x3 9
lisp x3 x2 4 //x2 current state
lisp x3 x4 5 //last state
spli x3 0 6
beq x4 x2 NOCLICK2
beq x4 x0 NOCLICK2 //last state was unclicked
spli x3 1 6
NOCLICK2
splreg x3 x2 5 //load current state to last state

li x3 8
lisp x3 x4 6 //load clicked bit to x4
beq x4 x0 NODEPLOY
    
    lw x5 0(x0) //x5 is hole card
    beq x5 x0 NODEPLOY //not selected any card
        lw x6 8(x0) //mid point
        lisp x3 x7 2 //get mouse1y
        blt x6 x7 NODEPLOY //wrong side (LOWER)
            li x6 100
            bge x6 x7 NODEPLOY //cannot deploy in hole cards
            lisp x3 x6 1 //get mouse1x
            li x10 0
            lisp x5 x11 6 //x11 = type
            slli x11 x11 2
            lw x11 19(x11)
            blt x30 x11 NODEPLOY 
            sub x30 x30 x11
            LOOPSELECTSPRITE
                lisp x10 x11 0 //x11 = x10 type
                bne x11 x0 NOTSPRITECARD
                    splreg x10 x6 1
                    splreg x10 x7 2
                    spli x10 0 3
                    lisp x5 x11 4
                    splreg x10 x11 4
                    lisp x5 x11 5
                    splreg x10 x11 5
                    lisp x5 x11 7
                    splreg x10 x11 7
                    spli x10 0 6
                    slli x11 x10 2 //x11= x10*4
                    sw x0 65(x11) //countdown 0
                    sw x0 66(x11) //target is none
                    sw x0 0(x0) //clear selected sprite
                    
                    lisp x5 x11 6 //x11 = type
                    slli x12 x11 2
                    lw x12 16(x12)
                    splreg x10 x12 3
                    splreg x10 x11 0
                    jmp ENDDEPLOY
                NOTSPRITECARD
                addi x10 x10 1
                li x11 64
            bne x10 x11 LOOPSELECTSPRITE
            ENDDEPLOY
    
NODEPLOY

li x3 9
lisp x3 x4 6 //load clicked bit to x4
beq x4 x0 NODEPLOY2
    
    lw x5 1(x0) //x5 is hole card
    beq x5 x0 NODEPLOY2 //not selected any card
        lw x6 8(x0) //mid point
        lisp x3 x7 2 //get mouse2y
        bge x6 x7 NODEPLOY2 //wrong side (UPPER)
            li x6 660
            blt x6 x7 NODEPLOY //cannot deploy in hole cards
            lisp x3 x6 1 //get mouse2x
            li x10 63
            lisp x5 x11 6 //x11 = type
            slli x11 x11 2
            lw x11 19(x11)
            blt x31 x11 NODEPLOY 
            sub x31 x31 x11
            LOOPSELECTSPRITE2
                lisp x10 x11 0 //x11 = x10 type
                bne x11 x0 NOTSPRITECARD2
              //      li x10 20
                    splreg x10 x6 1
                    splreg x10 x7 2
                    lisp x5 x11 4
                    splreg x10 x11 4
                    lisp x5 x11 5
                    splreg x10 x11 5
                    lisp x5 x11 7
                    splreg x10 x11 7
                    spli x10 0 6
                    slli x11 x10 2 //x11= x10*4
                    sw x0 65(x11) //countdown 0
                    sw x0 1(x0) //x5 is hole card
                    lisp x5 x11 6
                    slli x12 x11 2
                    lw x12 16(x12)
                    splreg x10 x12 3
                    splreg x10 x11 0
                    jmp ENDDEPLOY2
                NOTSPRITECARD2
                subi x10 x10 1
                
            bne x10 x0 LOOPSELECTSPRITE2
            ENDDEPLOY2
            lw x0 1(x0) //clear selected sprite
    
NODEPLOY2


//0 = ismouse1clicked selection
//1 = ismouse2clicked selection

//li x2 7
//sw x2 1(x0) //save 0 to 0
FOR1 //loop through all sprites with x1

    lisp x1 x2 0 //x2 is type
    beq x2 x0 SKIP//skip if not valid
    li x3 6
    beq x3 x2 SKIP //mouse 
    li x3 3 //hole card
    bne x3 x2 NOTHOLECARD
        //hole card
        lisp x1 x3 7 //team 
          beq x3 x0 HOLETEAM0
                //team 1
                li x3 9
                li x11 1
                jmp HOLETEAM1
            HOLETEAM0
                //team0
                li x3 8
                li x11 0
            HOLETEAM1
            lisp x3 x4 6 //load clicked bit to x4    
            beq x4 x0 SKIP //skip if not clicked
            //mouse location
            lisp x3 x4 1
            lisp x3 x5 2
            //hole card location
            lisp x1 x6 1
            lisp x1 x7 2
            blt x4 x6 SKIP
            blt x5 x7 SKIP
            sub x8 x4 x6
            sub x9 x5 x7
            li x10 50
            bge x8 x10 SKIP
            bge x9 x10 SKIP
            sw x1 0(x11)
        jmp SKIP
    NOTHOLECARD
    li x3 2 //arrow
    beq x2 x3 ARROWALIVE
    lisp x1 x3 4 //x3=health
    bne x3 x0 ALIVE
        //dead
        spli x1 0 0 //kill sprite
        jmp SKIP
    ALIVE
    ARROWALIVE
    lisp x1 x3 6 //load state to x3
    beq x3 x0 NEEDTARGET
        //do not need target
        slli x3 x1 2 //x3 = x1*4
        lw x4 65(x3) //x4= countdown
        beq x4 x0 ZEROCD 
            //if countdown>0
            subi x4 x4 1
            sw x4 65(x3)
            jmp SKIP
        ZEROCD
        lisp x1 x4 6 //load state to x4
        li x5 3
        beq x4 x5 FIGHT1
            li x5 4
            beq x4 x5 FIGHT2
                li x5 1
                beq x5 x4 WALK1
                    li x5 2
                    beq x5 x4 WALK2
                        jmp SKIP
                    WALK2
                    slli x6 x2 2 
                    lw x7 16(x6) //load base frame to x7
                    splreg x1 x7 3 //change frame to base
                    lw x7 66(x3) //load dx
                    lw x8 67(x3) //load dy
                    //change position
                    spadd x1 x7 1
                    spadd x1 x8 2
                    sw x0 66(x3) //zero dx
                    sw x0 67(x3) //zero dy
                    spli x1 0 6 //state is 0
                jmp SKIP
                WALK1
                    slli x6 x2 2 
                    
                    
                    lisp x1 x8 0 //x8 = type
                    li x9 2
                    li x22 7
                    lw x7 6(x0) 
                    bne x8 x22 NOGIANTWALK
                        slli x7 x7 2
                    NOGIANTWALK
                    bne x8 x9 NOTARROWWALK
                        srli x7 x7 3
                        jmp ARROWWALK
                    NOTARROWWALK
                        lw x8 16(x6) //load base frame to x7
                        addi x8 x8 3 //walking2 is 3+base
                        splreg x1 x8 3 //change frame to walking2
                    ARROWWALK
                    
                    sw x7 65(x3) //change countdown
                    lw x7 66(x3) //load dx
                    lw x8 67(x3) //load dy
                    //change position
                    spadd x1 x7 1
                    spadd x1 x8 2
                    spli x1 2 6 //state is 2 (WALK2)
                jmp SKIP
            FIGHT2
                slli x6 x2 2 
                lw x7 16(x6) //load base frame to x7
                splreg x1 x7 3 //change frame to base
                spli x1 0 6 //state is 0 (idle)
                lw x7 66(x3) //load target
                lisp x7 x8 4 //x8=target health
                beq x8 x0 SKIP //skip if target dead
                lisp x1 x9 0 //type
                li x10 5
                lw x7 4(x0) 
            //    slli x3 x1 2
            //    sw x7 65(x3) //change countdown
                li x11 1
                beq x9 x11 TOWERATTACK //tower
                bne x9 x10 REGULARATTACK
                TOWERATTACK
                //archer
                lisp x1 x9 7 //x9 = team
                bne x9 x0 TEAM0
                    //team1
                    li x10 63
                    LOOPSELECTARROW
                    lisp x10 x11 0 //x11 = x10 type
                    bne x11 x0 NOTARROWCARD
                        //load in all arrow stats
                        lisp x1 x11 1
                        splreg x10 x11 1
                        lisp x1 x11 2
                        splreg x10 x11 2
                        li x11 2 //arrow 
                        slli x12 x11 2
                        lw x12 16(x12) //load arrow sprite frame 
                        spli x10 15 3
                       // splreg x10 x12 3
                        lisp x1 x11 5
                        splreg x10 x11 5
                        spli x10 0 6
                        lisp x1 x11 7
                        splreg x10 x11 7
                        slli x11 x1 2 //x11= x1*4
                        lw x12 66(x11) //get target
                        slli x11 x10 2 //x11= x10*4
                        sw x0 65(x11)
                        splreg x10 x12 4
                        spli x10 2 0 //load in sprite last
                        jmp SKIP
                    NOTARROWCARD
                    subi x10 x10 1
                    bne x10 x0 LOOPSELECTARROW
                    jmp SKIP
                TEAM0
                    li x10 0
                    LOOPSELECTARROW2
                    lisp x10 x11 0 //x11 = x10 type
                    bne x11 x0 NOTARROWCARD2
                        //load in all arrow stats
                        lisp x1 x11 1
                        splreg x10 x11 1
                        lisp x1 x11 2
                        splreg x10 x11 2
                        li x11 2 //arrow
                        slli x12 x11 2
                        lw x12 16(x12) //load arrow sprite frame 
                        spli x10 15 3
                     //   splreg x10 x12 3
                        lisp x1 x11 5
                        splreg x10 x11 5
                        spli x10 0 6
                        lisp x1 x11 7
                        splreg x10 x11 7
                        slli x11 x1 2 //x11= x1*4
                        lw x12 66(x11) //get target
                        slli x11 x10 2 //x11= x10*4
                        sw x0 65(x11)
                        splreg x10 x12 4
                        //load in sprite last
                        spli x10 2 0
                        jmp SKIP
                    NOTARROWCARD2
                    addi x10 x10 1
                    li x11 63
                    bne x10 x11 LOOPSELECTARROW2
                    jmp SKIP
                REGULARATTACK
                attack x7 x1 4 5 //attack!
            jmp SKIP
        FIGHT1
            lisp x1 x2 0
            slli x6 x2 2 
            lw x7 16(x6) //load base frame to x7
            addi x7 x7 0 //fighting2 is base
            splreg x1 x7 3 //change frame to fighting2
            lw x7 4(x0) 
            sw x7 65(x3) //change countdown
            spli x1 4 6 //state is 4 (FIGHTING2)
        jmp SKIP
    NEEDTARGET
    lisp x1 x2 7//x2 = team
    
    li x10 10000 //min distance
    li x11 0 //goalx
    li x12 0 //goaly
    li x20 0 //sprite index
    li x3 2
    lisp x1 x4 0
    beq x4 x3 ARROW //to arrow if arrow
    li x3 0
    FOR2 //loop with x3
        //determine if other sprite is valid and on other team and not equal to current sprite
        beq x3 x1 SKIPINNER
        lisp x3 x4 4 //x4= health of x3
        beq x4 x0 SKIPINNER
        lisp x3 x5 0 //x5=type
        beq x5 x0 SKIPINNER //dead sprite
        lisp x1 x6 0 //x6 = x1 type
        li x7 7
        bne x7 x6 NOTGIANT
            li x7 1
            bne x5 x7 SKIPINNER //target needs to be building
        NOTGIANT
        li x6 6 //mouse
        beq x6 x5 SKIPINNER
        li x6 3 //hole card
        beq x6 x5 SKIPINNER
        li x4 2
        beq x5 x4 SKIPINNER //arrow
        lisp x3 x5 7//x5=team
        beq x5 x2 SKIPINNER
        dist x1 x3 x5 1 2 //x5 = distance between x1 and x3
        bge x5 x10 SKIPINNER
        addi x10 x5 0 //x10=x5 new smallest distance
        lisp x3 x11 1 //load new x
        lisp x3 x12 2 //load new y
        addi x20 x3 0 //load sprite index to x20
        SKIPINNER
        addi x3 x3 1 //increment x3
        li x6 64
    bne x3 x6 FOR2 //END FOR2
    li x13 10000
    beq x10 x13 SKIP //skip if found no one
    
    lisp x1 x13 1//load x into x13
    lisp x1 x14 2//load y into x14
    jmp ARROWDONE
    ARROW
        slli x3 x1 2 //x3 = x1 * 4
        lisp x1 x13 1//load x into x13
        lisp x1 x14 2//load y into x14
        lisp x1 x20 4//load target
        lisp x20 x6 0 //type
        bne x6 x0 TARGETALIVE
            //dead so kill arrow
            spli x1 0 0 //kill sprite
            jmp SKIP
        TARGETALIVE
        lisp x20 x11 1
        lisp x20 x12 2
        abs x15 x13 x11
        abs x16 x14 x12
        add x18 x15 x16
        li x19 20 //20 is close enough
        bge x18 x19 HALFDONE
        attack  x20 x1 4 5 //attack
        spli x1 0 0 //kill sprite
        jmp SKIP
    ARROWDONE
    abs x15 x13 x11
    abs x16 x14 x12
    li x17 5
    add x18 x15 x16
    li x19 20 //50 is close enough
    lisp x1 x4 0 //x4 is type
    li x3 1
    bne x3 x4 NOTTOWER
        li x19 350
        blt x18 x19 GETFIGHTING
        jmp SKIP
    NOTTOWER
    li x3 5
    bne x3 x4 NOTARCHER
        li x19 200 //100 for archers
    NOTARCHER

    blt x18 x19 GETFIGHTING
        //no fighting
        lw x3 8(x0)//x3 = y midpoint
        blt x14 x3 TOPHALF
            //bottom half
            bge x12 x3 HALFDONE
                // goal is top half
                subi x4 x3 10
                addi x12 x4 0 //x12 = bridge y-10
                lw x4 11(x0)
                blt x11 x4 LEFTBOT
                    //right
                    lw x11 9(x0) //x11 = right bridge x
                    jmp HALFDONE
                LEFTBOT
                    lw x11 7(x0) //x11 = left bridge x
                jmp HALFDONE
        TOPHALF
            blt x12 x3 HALFDONE
                // goal is bottom half
                addi x12 x3 0 // x12= bridge y
                addi x12 x3 10 //x12 = bridge y+10
                lw x4 11(x0)
                blt x11 x4 LEFTTOP
                    //right
                    lw x11 9(x0)
                    jmp HALFDONE
                LEFTTOP
                    lw x11 7(x0)
        HALFDONE
        //moving
        abs x15 x13 x11
        abs x16 x14 x12
        spli x1 1 6 //state is 1 (WALK1)
        lisp x1 x2 0//x2 = x1 type
        slli x6 x2 2 
        
        lw x7 6(x0) //load countdown
        slli x3 x1 2
        li x4 2
        li x22 7
        bne x2 x22 NOGIANTCOUNTDOWN
            slli x7 x7 2
        NOGIANTCOUNTDOWN
        bne x4 x2 NOARROWCOUNTDOWN
            srli x7 x7 3
            jmp ARROWCOUNTDOWN
        NOARROWCOUNTDOWN
            lw x8 16(x6) //load base frame to x8
            addi x8 x8 2 //walking1 is 2+base
            splreg x1 x8 3 //change frame to walking1
            
        ARROWCOUNTDOWN
        sw x7 65(x3) //change countdown
        blt x15 x16 IFVERT
        sw x0 67(x3)
        blt x11 x13 LEFT
        //go right
        li x7 5 //5 pixels
        sw x7 66(x3)
        jmp SKIP
        LEFT
        //go left
        lw x7 5(x0) //-5
        sw x7 66(x3)
        jmp SKIP
        IFVERT
        sw x0 66(x3)
        blt x12 x14 UP
        //go down
        li x7 5 //5 pixels
        sw x7 67(x3)
        jmp SKIP
        UP
        //go up
        lw x7 5(x0) //-5
        sw x7 67(x3)
        jmp SKIP
    GETFIGHTING
        spli x1 3 6 //state is 3 (fighting 1)
        lisp x1 x2 0
        slli x6 x2 2 
        lw x7 16(x6) //load base frame to x7
        slli x3 x1 2
        li x4 2
        beq x4 x2 NOARROWATTACK1
        li x4 1
        beq x4 x2 NOARROWATTACK1 //tower
        addi x7 x7 1 //fighting1 is 1+base
        NOARROWATTACK1
        splreg x1 x7 3 //change frame to fighting1
        lw x7 4(x0) 
        slli x3 x1 2
        sw x7 65(x3) //change countdown
        sw x20 66(x3) //target
        jmp SKIP
    SKIP
    addi x1 x1 1 //increment x1
    li x6 64
bne x1 x6 FOR1 //END FOR1
jmp LOOP